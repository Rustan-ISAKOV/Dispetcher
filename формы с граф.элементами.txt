simpleGUI.java

package com.company;

import java.awt.*;
import java.awt.event.*; // отслеживаем нажатие на кнопку
import javax.swing.*;   // формы, кнопки, поля

public class SimpleGUI extends JFrame { // JFrame - помогает создавать различные формочки
    private JButton button = new JButton("Press Button");
    private JTextField input = new JTextField("йцу", 5);   //текстовое поле
    private JLabel label = new JLabel ("Input here:"); //текстовое поле
    private JRadioButton radio1 = new JRadioButton("Select this1:");  // название для формы
    private JRadioButton radio2 = new JRadioButton("Select this2:");  // название для формы
    private JCheckBox check = new JCheckBox("Ckeck:", false);   // false - без галочки

    // конструктор SimpleGUI, который будет вызываться при создании объекта данного класса
    public SimpleGUI () {
        super("Simple example");    // передаем в консруктор в основном классе JFrame название формы
        this.setBounds(100,100,250,100);    // задаем положение и размер формы
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    //закрытие формы

        Container container = this.getContentPane();    // container - это форма, в которой находятся наши граф.элементы
        container.setLayout(new GridLayout(3,2, 2, 2));
        container.add(label);   // помещаем в контейнер надпись
        container.add(input);   // помещаем поле ввода

        ButtonGroup group = new ButtonGroup();  // создаем группу для радиокнопок, чтобы переключались между собой
        group.add(radio1);  // в группу добавляем две кнопки
        group.add(radio2);
        container.add(radio1);  // в контейнер + radio1
        radio1.setSelected(true); // радиокнопка выделена
        container.add(radio2);
        container.add(check);   // + checkbox
        // + кнопку. причем при нажатии на нее д-но происходить действие
        button.addActionListener(new ButtonEventlistener ()); // вызываем новый класс, в котором будет реализация необх
        // .действия
        container.add(button); // + кнопку в контейнер
    }

    // создаем класс ButtonEventlistener, реализов-й интерфейс ActionListener
    // это Н., т.к. мы пишем addActionListener и создали новый класс  new ButtonEventlistener (), то он реализует
    // интерфейс ActionListener - обработчик всех наших событий
    class ButtonEventlistener implements ActionListener {
        public void actionPerformed (ActionEvent e) {   //метод ничего не возвращ-й,
            String message = "";    //создаем строк. переменную, для выдачи сообщения пользователю, вначале пустое
            message += "Button was pressed\n";             // теперь его наполняем. \n - переход на новую строку
            message += "Text is " + input.getText() + "\n";    // + текст из Input, который создали в самом начале
            message += (radio1.isSelected() ? "Radio 1" : "Radio 2") + "is selected! \n";
            message += "Checkbox is " + ((check.isSelected() ? "checked" : "unchecked"));
            //выводится новое окно с сообщением, в кот. указ-я 4-е вышеуказанных message
            JOptionPane.showMessageDialog(null, message, "Output", JOptionPane.PLAIN_MESSAGE);
        }
    }

}


main.java
package com.company;

//import java.lang.String;    // для импортирования переменных String
import java.util.Scanner;

// Интерфейс представляет из себя класс, в котором все поля будут статик и/или финал, а все методы будут абстрактными

public class Main {

    public static void main (String[] args) {
        // вывзываем форму
        SimpleGUI app = new SimpleGUI();
        app.setVisible(true); // при создании проекта наша панель будет видимой








    }
}